======================================
 sssp - proxied s3 lookups and signing
======================================

Synopsis
--------

.. code-block:: text

    sssp ...

Description
-----------

SSSP is an HTTP proxy for S3 that can generate short-lived, signed URLs for
stored objects. By providing a server separate from S3 that can be placed
behind an authenticating proxy or firewall, SSSP allows a variety of common
security mechanisms to be used to limit access to S3 objects over HTTP while
taking advantage of S3's considerable bandwidth and parallelism.

Use-cases for SSSP include:

  * sharing of large files within an organization,

  * media service for public facing web applications,

  * distribution of internal software.

Options
-------

  ``-lolno``
    No LOLs are permitted with this option.

REST Interface
--------------

URLs in SSSP point to one of two objects: an item or a listing. Items
correspond to S3 objects; a GET retrieves a signed redirect to the object.
Listings are a sequence of URLs, in ascending order; a GET retrieves the
listing as a plaintext document, one URL per line.

..  TODO
    Signed redirects to items are, by default, good for ten seconds; but the
    time can be specified with the ``t`` parameter, which accepts a number of
    seconds or an ISO 8601 date. The signed redirect is always a 303 that
    points directly to Amazon S3. If the ``nosign`` parameter is given, the
    redirect points back to the S3P server; this is the identity for most URLs
    but can be useful when working with wildcards (see below).

.. code-block:: text

  GET http://sssp.io/p/a/t/h         # Signed for the default time (10s).

..  TODO
    GET http://sssp.io/p/a/t/h?t=_n_s  # Signed for _n_ seconds.
    GET http://sssp.io/p/a/t/h?t=_t_   # Signed until _t_.
    GET http://sssp.io/p/a/t/h?nosign  # Just this URL again.

A PUT to an item sets the item's content. DELETEs can be singular or plural. A
plural DELETE removes only the objects generated by a listing.

URLs are divided syntactically in to listings and items. A URL ending with a
slash is always a listing.

.. code-block:: text

  GET http://sssp.io/raw    # Signed redirect to an object called raw.
  GET http://sssp.io/raw/   # Listing of items below the key `raw'.

To make it easier to work with versioned or timestamped assets, SSSP supports a
``@hi`` and ``@lo`` meta-path. These correspond to the ASCIIbetically highest
and lowest (last and first) items, respectively.

.. code-block:: text

  GET http://sssp.io/raw/2010-04/mbox
  GET http://sssp.io/raw/2010-05/mbox
  GET http://sssp.io/raw/2010-06/mbox
  GET http://sssp.io/raw/2010-07/mbox

  # Retrieval with /hi and /lo.
  GET http://sssp.io/raw/@hi/mbox  -307->  http://sssp.io/raw/2010-07/mbox
  GET http://sssp.io/raw/@lo/mbox  -307->  http://sssp.io/raw/2010-04/mbox

The ``@hi`` and ``@lo`` wildcards, used together with a count, can make a
listing:

.. code-block:: text

  GET http://sssp.io/raw/@hi2/mbox  -200->  mbox
                                            mbox

  GET http://sssp.io/raw/@lo2/mbox  -200->  mbox
                                            mbox

Counts are the natural numbers starting at 0.

..  TODO
    The wildcard ``@*`` refers to "all the items" (``@hi*`` and ``@lo*`` are
    equivalent so just ``@*`` is enough.)

A counted wildcard, like ``@hi2``, can be suffixed with a tilde to form it's
complement -- so ``@hi2~`` is everything but the highest two items. This can
be useful for bulk deletion of old/new things.

Examples
--------

.. code-block:: bash

  # Start web application.
  sssp ...

Bugs
----

Listing results should really be URLs. The time to sign should really be
configurable; or at least settable with a query parameter.

